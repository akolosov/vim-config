set expandtab
set mouse=a
set title

set ignorecase                                      " игнорировать регистр при поиске
set smartcase
set hlsearch                                        " подсвечивать поиск
set incsearch                                       " использовать инкрементальный поиск

set autoindent                                      " indents if previous line was indented
set smartindent                                     " smart indenting

set linebreak                                       " перенос по словам, а не по буквам
set dy=lastline

set encoding=utf-8                                  " set charset translation encoding
set termencoding=utf-8                              " set terminal encoding
set fileencoding=utf-8                              " set save encoding
set fileencodings=utf8,koi8r,cp1251,cp866           " список предполагаемых кодировок, в порядке предпочтения

set viminfo+=n$HOME/.vim/tmp/viminfo

set foldcolumn=5

set t_Co=256

set pastetoggle=<F3>

set autochdir

set noshowmode

set confirm

set gdefault                                        " Add the g flag to search/replace by default

set binary

set noeol                                           " Don’t add empty newlines at the end of files

set cursorline                                      " Highlight current line

set noerrorbells                                    " Disable error bells

set shortmess=atI                                   " Don’t show the intro message when starting Vim

if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
else
  set clipboard=unnamed
endif

nnoremap ; :

noremap <F1> <nop>

imap <F2> <Esc>:w<CR>i
map  <F2> <Esc>:w<CR>

imap <C-F2> <Esc>:wa<CR>i
map  <C-F2> <Esc>:wa<CR>

imap <S-F2> <Esc>:w<SPACE><C-R>=expand("%:p")<CR>
map  <S-F2> <Esc>:w<SPACE><C-R>=expand("%:p")<CR>

imap <C-s> <Esc>:w<SPACE><C-R>=expand("%:p")<CR>
map  <C-s> <Esc>:w<SPACE><C-R>=expand("%:p")<CR>

map <C-y> <ESC>dd
imap <C-y> <ESC>ddi

map <C-k> <ESC>d$
imap <C-k> <ESC><Right>d$i

map <C-w> <ESC>bdw
imap <C-w> <ESC>bdwi

map <silent> <F4> <Esc>:call ToggleReadonly()<CR>

inoremap <silent> <F6> <Esc>:Ag <cword><CR>
nnoremap <silent> <F6> :Ag <cword><CR>
vnoremap <silent> <F6> :<C-U>execute "Ag " . GetVisual()<CR>

inoremap <S-F6> <Esc>:call Replace()<CR>
nnoremap <S-F6> :call Replace()<CR>

inoremap <F7> <Esc>:let @/ = SearchInFile()<CR>
inoremap <S-F7> <Esc>ni
noremap <F7> :let @/ = SearchInFile()<CR>
noremap <S-F7> <Esc>n

imap <silent> <F9> <Esc>:Unite -silent menu:mainmenu<CR>
map  <silent> <F9> <Esc>:Unite -silent menu:mainmenu<CR>

imap <F10> <ESC>:qa!<CR>
nmap <F10> :qa!<CR>
vmap <F10> <ESC>:qa!<CR>
map <F10> <ESC>:qa!<CR>

if &readonly || argc()
	noremap <silent> <Esc><Esc> :qa<CR>
	inoremap <silent> <Esc><Esc> <Esc>:qa<CR>
endif

imap <S-F10> <ESC>:wqa!<CR>
nmap <S-F10> :wqa!<CR>
vmap <S-F10> <ESC>:wqa!<CR>
map <S-F10> <ESC>:wqa!<CR>

nmap <C-t> :TagbarToggle<CR>

nmap <C-g> :Gitv<CR>

imap <C-d> <ESC>:NERDTreeToggle<CR>
nmap <C-d> <ESC>:NERDTreeToggle<CR>
vmap <C-d> <ESC>:NERDTreeToggle<CR>

nnoremap <silent> // :nohlsearch<CR><Esc>

nmap <C-_> :TComment<CR>
vmap <C-_> :TComment<CR>
imap <C-_> <ESC>:TComment<CR>i

" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
map <C-V> "+gP
map <S-Insert> "+gP

cmap <C-V> <C-R>+
cmap <S-Insert> <C-R>+

exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

imap <S-Insert> <C-V>
vmap <S-Insert> <C-V>

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

vmap <Tab> >
nnoremap <silent> <Tab> :wincmd w<CR>

vmap <S-Tab> <
imap <S-Tab> <Esc><<i

" Allow using the repeat operator with a visual selection (!)
vnoremap . :normal .<CR>

" Text selection by SHIFT+Arrows
imap <S-Up> <Esc>v<Up>
imap <S-Down> <Esc>v<Down>
imap <S-Left> <Esc>v<Left>
imap <S-Right> <Esc>v<Right>
nmap <S-Up> v<Up>
nmap <S-Down> v<Down>
nmap <S-Left> v<Left>
nmap <S-Right> v<Right>
vmap <S-Up> <Up>
vmap <S-Down> <Down>
vmap <S-Left> <Left>
vmap <S-Right> <Right>

map <A-right> <Esc>gt
map <A-left> <Esc>gT
imap <A-right> <Esc>gti
imap <A-left> <Esc>gTi

nnoremap <silent> vv <C-w>v
nnoremap <silent> hh <C-w>s
nnoremap <silent> qq :call CloseWindowOrKillBuffer()<CR>

map <C-z> <Esc>:UndotreeToggle<CR>

map <C-b> <Esc>:YRShow<CR>

map <C-e> <Esc>:tabnew<CR>

nnoremap <silent>' :<C-U>call ToggleQuote()<CR>

" Swap words
noremap <silent> <Leader>sw <Esc>bdwwP

" Replace words
noremap <silent> <Leader>rw "_diwhp

" Strip trailing whitespace
noremap <silent> <leader>ss :call StripWhitespace()<CR>

" Code folding options
nmap <silent> <leader>f0 :set foldlevel=0<CR>:set foldcolumn=0<CR>
nmap <silent> <leader>f1 :set foldlevel=1<CR>:set foldcolumn=1<CR>
nmap <silent> <leader>f2 :set foldlevel=2<CR>:set foldcolumn=2<CR>
nmap <silent> <leader>f3 :set foldlevel=3<CR>:set foldcolumn=3<CR>
nmap <silent> <leader>f4 :set foldlevel=4<CR>:set foldcolumn=4<CR>
nmap <silent> <leader>f5 :set foldlevel=5<CR>:set foldcolumn=5<CR>
nmap <silent> <leader>f6 :set foldlevel=6<CR>:set foldcolumn=6<CR>
nmap <silent> <leader>f7 :set foldlevel=7<CR>:set foldcolumn=7<CR>
nmap <silent> <leader>f8 :set foldlevel=8<CR>:set foldcolumn=8<CR>
nmap <silent> <leader>f9 :set foldlevel=9<CR>:set foldcolumn=9<CR>

" Git
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>ga :Git add -p %<CR>

" Space for open/close folds if exist
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

nmap <M-Up> gUiw
imap <M-Up> <Esc>gUiw<Esc>i
nmap <M-Down> guiw
imap <M-Down> <Esc>guiw<Esc>i

au BufReadPost * if &readonly | setlocal nomodifiable | else | setlocal modifiable | endif
au VimEnter * nested :call LoadSession()
au VimLeave * :call UpdateSession()

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Anonymous\ Pro\ for\ Powerline\ 12
  elseif has("gui_macvim")
    set guifont=Anonymous\ Pro\ for\ Powerline:h14
  endif
endif

syntax enable
set background=dark
colorscheme distinguished
AirlineTheme wombat

redraw!

