nnoremap ; :

" No HELP
map <F1> <nop>
imap <F1> <Esc>

" Repeat the last recorded macro
map Q @@

" remap U to <C-r> for easier redo
nnoremap U <C-r>

" Easy up and down on wrapped long lines
nnoremap j gj
nnoremap k gk

if exists('g:dont_use_ArrowKeys')
  nnoremap <up> <nop>
  nnoremap <down> <nop>
  nnoremap <left> <nop>
  nnoremap <right> <nop>
else
  nnoremap <Down> gj
  nnoremap <Up> gk
endif

" A more handy Esc
inoremap jj <Esc>
inoremap kk <Esc>
inoremap jk <Esc>
inoremap kj <Esc>

" Easier increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

" Jump to start and end of line using the home row keys
noremap H ^
noremap L $

" Insert new line before current line
nnoremap <Leader><BS> O<ESC>j

" Insert new line after current line
nnoremap <Leader><CR> o<ESC>k

" Insert semeoclon to EOL
" then press space to add new line below
inoremap ;; <Esc>m`A;<Esc>``a
inoremap ;;<Space> <Esc>A;<Esc>o
nnoremap ;; m"A;<Esc>`"
nnoremap ;;<Space> A;<Esc>

" Show most plugin keybindings
nnoremap <silent><Leader>? :map <Leader><CR>

" CtrlP filemanager
nnoremap <Leader>o :CtrlP<CR>

" Type <Leader>w to save file (a lot faster than :w<Enter>):
nnoremap <Leader>w :w<CR>

" <Leader># Surround a word with #{ruby interpolation}
map <Leader># ysiw#
vmap <Leader># c#{<C-R>"}<ESC>

" <Leader>" Surround a word with "quotes"
map <Leader>" ysiw"
vmap <Leader>" c"<C-R>""<ESC>

" <Leader>' Surround a word with 'single quotes'
map <Leader>' ysiw'
vmap <Leader>' c'<C-R>"'<ESC>

" <Leader>) or <Leader>( Surround a word with (parens)
" The difference is in whether a space is put in
map <Leader>( ysiw(
map <Leader>) ysiw)
vmap <Leader>( c( <C-R>" )<ESC>
vmap <Leader>) c(<C-R>")<ESC>

" <Leader>[ Surround a word with [brackets]
map <Leader>] ysiw]
map <Leader>[ ysiw[
vmap <Leader>[ c[ <C-R>" ]<ESC>
vmap <Leader>] c[<C-R>"]<ESC>

" <Leader>{ Surround a word with {braces}
map <Leader>} ysiw}
map <Leader>{ ysiw{
vmap <Leader>} c{ <C-R>" }<ESC>
vmap <Leader>{ c{<C-R>"}<ESC>

" <Leader>` Surround a word with `apostrophes`
map <Leader>` ysiw`

" Selection inside:
" inside []
map <Leader>s]  vi[
vmap <Leader>s]  i[
" with []
map <Leader>s[  va[
vmap <Leader>s[  a[
" inside {}
map <Leader>s}  vi{
vmap <Leader>s}  i{
" with {}
map <Leader>s{  va{
vmap <Leader>s{  a{
" inside ()
map <Leader>s)  vi(
vmap <Leader>s)  i(
" with ()
map <Leader>s(  va(
vmap <Leader>s(  a(
" inside <>
map <Leader>s>  vi<
vmap <Leader>s>  i<
" with <>
map <Leader>s<  va<
vmap <Leader>s<  a<
" inside ""
map <Leader>s"  vi"
vmap <Leader>s"  i"
" inside ''
map <Leader>s'  vi'
vmap <Leader>s'  i'

" Go to last edit location with <Leader>.
nnoremap <Leader>. '.

" Switch between the last two files
nnoremap '' <c-^>

" Set working directory
nnoremap <silent> <leader>cd :lcd %:p:h<CR>

" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>ee :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" <Leader>qc to toggle quickfix window (where you have stuff like Ag)
" <Leader>qo to open it back up (rare)
nmap <silent> <Leader>qc :cclose<CR>
nmap <silent> <Leader>qo :copen<CR>

" Make gf (go to file)
" Create the file if not existent
nnoremap <Leader>gf :e <cfile><CR>
nnoremap <Leader>gfw :sp +e <cfile><CR>
nnoremap <Leader>gft :tabe <cfile><CR>

" Save file
imap <F2>   <Esc>:w<CR>i
vmap <F2>   :<C-U>w<CR>v
nmap  <F2>   :w<CR>

" Save all files
imap <C-F2> <Esc>:wa<CR>i
vmap <C-F2> :<C-U>wa<CR>v
nmap  <C-F2> :wa<CR>

" Save file as...
imap <S-F2> <Esc>:w<SPACE><C-R>=expand("%:p")<CR>
vmap <S-F2> :<C-U>w<SPACE><C-R>=expand("%:p")<CR>
nmap  <S-F2> :w<SPACE><C-R>=expand("%:p")<CR>

" Delete line
map  <C-y>  dd
imap <C-y>  <ESC>ddi

" Delete line to EOL
map  <C-k>  d$
imap <C-k>  <ESC><Right>d$i<Right>

" Delete line to BOL
map  <C-h>  d^
imap <C-h>  <ESC>d^i

" Toggle readonly mode
map <silent> <F4> <Esc>:call ToggleReadonly()<CR>

" F5 - Open the selected region in a new narrowed window
noremap <silent> <F5> :NR<CR>
inoremap <silent> <F5> <Esc>:NR<CR>

map <silent> <leader>tb :tab :ball<cr>

imap <silent> <S-F8> <Esc>:sball<CR>
map <silent> <S-F8> :sball<CR>

imap <F10> <ESC>:qa!<CR>
map <F10> :qa!<CR>

if (&readonly || argc() || !isdirectory(argv(0))) && ((exists('g:nerdtree_tabs_open_on_console_startup') && g:nerdtree_tabs_open_on_console_startup != 1) && (exists('g:nerdtree_tabs_open_on_gui_startup') && g:nerdtree_tabs_open_on_gui_startup != 1)) || (exists("g:dont_use_NERDTree"))
  noremap <silent> <Esc><Esc> :qa<CR>
  inoremap <silent> <Esc><Esc> <Esc>:qa<CR>
else
  noremap <silent> <Esc><Esc><Esc> :call CloseWindowOrKillBuffer()<CR>
  inoremap <silent> <Esc><Esc><Esc> <Esc>:call CloseWindowOrKillBuffer()<CR>
endif

noremap <silent> <Leader>c :call CloseWindowOrKillBuffer()<CR>

imap <S-F10> <ESC>:wqa!<CR>
map <S-F10> :wqa!<CR>

map <C-g>   :TagbarToggle<CR>
imap <C-g>   <Esc>:TagbarToggle<CR>

noremap <silent> // :nohlsearch<CR><Esc>

" Ctrl-/ - Comment current line.
map <C-_> ,ci
imap <C-_> <ESC>,cii

if !exists("g:dont_use_CopyCutPasteKeys")
	" CTRL-X and SHIFT-Del are Cut
	vnoremap <C-X>   "+x
	vnoremap <S-Del> "+x

	" CTRL-C and CTRL-Insert are Copy
	vnoremap <C-C>      "+y
	vnoremap <C-Insert> "+y

	" CTRL-V and SHIFT-Insert are Paste
	map  <C-V>      "+gP
	map  <S-Insert> "+gP

	cmap <C-V>      <C-R>+
	cmap <S-Insert> <C-R>+

	exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
	exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

	imap <S-Insert> <C-V>
	vmap <S-Insert> <C-V>
endif

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

vmap <Tab> >
nnoremap <silent> <Tab> :wincmd w<CR>
nnoremap <silent> <S-Tab> :wincmd W<CR>

vmap <S-Tab> <
imap <S-Tab> <Esc><<i

" Allow using the repeat operator with a visual selection (!)
vnoremap . :normal .<CR>

if !exists('g:dont_use_ArrowKeys')
	" Text selection by SHIFT+Arrows
	imap <S-Up>    <Esc>v<Up>
	imap <S-Down>  <Esc>v<Down>
	imap <S-Left>  <Esc>v<Left>
	imap <S-Right> <Esc><Right>v<Right>
	nmap <S-Up>    v<Up>
	nmap <S-Down>  v<Down>
	nmap <S-Left>  v<Left>
	nmap <S-Right> v<Right>
	vmap <S-Up>    <Up>
	vmap <S-Down>  <Down>
	vmap <S-Left>  <Left>
	vmap <S-Right> <Right>
	imap <S-End>   <Esc>v<End>
	imap <S-Home>  <Esc>v<Home>
	nmap <S-End>   v<End>
	nmap <S-Home>  v<Home>
	vmap <S-End>   <End>
	vmap <S-Home>  <Home>
endif

nnoremap <silent> vv <C-w>v
nnoremap <silent> hh <C-w>s

map <C-z> :UndotreeToggle<CR>
imap <C-z> <Esc>:UndotreeToggle<CR>

map <C-\> :YRShow<CR>
imap <C-\> <Esc>:YRShow<CR>

map <C-t> :tabnew<CR>
imap <C-t> <Esc>:tabnew<CR>

if exists('g:use_VimShell')
  map `` :VimShell<CR>
  map <C-l> :VimShell<CR>
  imap <C-l> <Esc>:VimShell<CR>
endif

noremap <silent> ' :<C-U>call ToggleQuote()<CR>

" Swap words
noremap <silent> <Leader>sw <Esc>bdwwP

" Replace words
noremap <silent> <Leader>rw "_diwhp

" Delete blank lines
nnoremap <Leader>db :%g/^$/d<CR>\h
vnoremap <Leader>db :g/^$/d<CR>:setlocal nohls<CR>

" Surround every line in the file with '
nnoremap <Leader>l' :%s/.*/'\0'<CR>:setlocal nohls<CR>
vnoremap <Leader>l' :s/.*/'\0'<CR>:setlocal nohls<CR>

" Surround every line in the file with "
nnoremap <Leader>l" :%s/.*/"\0"<CR>:setlocal nohls<CR>
vnoremap <Leader>l" :s/.*/"\0"<CR>:setlocal nohls<CR>

" Surround every line in the file with ()
nnoremap <Leader>l( :%s/.*/(\0)<CR>:setlocal nohls<CR>
vnoremap <Leader>l( :s/.*/(\0)<CR>:setlocal nohls<CR>

" Surround every line in the file with []
nnoremap <Leader>l[ :%s/.*/[\0]<CR>:setlocal nohls<CR>
vnoremap <Leader>l[ :s/.*/[\0]<CR>:setlocal nohls<CR>

" Surround every line in the file with {}
nnoremap <Leader>l{ :%s/.*/{\0}<CR>:setlocal nohls<CR>
vnoremap <Leader>l{ :s/.*/{\0}<CR>:setlocal nohls<CR>

" Strip trailing whitespace
noremap <silent> <leader>ss :call StripWhitespace()<CR>

" Search word under cursor or selected word entire files in current directory (recursively)
nnoremap <silent> <Leader>sf :Ag <cword><CR>
vnoremap <silent> <Leader>sf :<C-U>execute "Ag ".GetVisual()<CR>

" Search word under cursor and replace with user inputs in current file
nnoremap <Leader>sr :%s/<C-R>=expand("<cword>")<CR>//<Left>
vnoremap <Leader>sr :<C-U>%s/<C-R>=GetVisual()<CR>//<Left>

" Code folding options
nmap <silent> <leader>f0 :set foldlevel=0<CR>:set foldcolumn=0<CR>
nmap <silent> <leader>f1 :set foldlevel=1<CR>:set foldcolumn=1<CR>
nmap <silent> <leader>f2 :set foldlevel=2<CR>:set foldcolumn=2<CR>
nmap <silent> <leader>f3 :set foldlevel=3<CR>:set foldcolumn=3<CR>
nmap <silent> <leader>f4 :set foldlevel=4<CR>:set foldcolumn=4<CR>
nmap <silent> <leader>f5 :set foldlevel=5<CR>:set foldcolumn=5<CR>
nmap <silent> <leader>f6 :set foldlevel=6<CR>:set foldcolumn=6<CR>
nmap <silent> <leader>f7 :set foldlevel=7<CR>:set foldcolumn=7<CR>
nmap <silent> <leader>f8 :set foldlevel=8<CR>:set foldcolumn=8<CR>
nmap <silent> <leader>f9 :set foldlevel=9<CR>:set foldcolumn=9<CR>

" Git
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <leader>gd  :Gvdiff<CR>
nnoremap <leader>gc  :!git commit -a -m '<C-R>="'"<CR><Left>
nnoremap <leader>gl  :!git pull<CR>
nnoremap <leader>gp  :Git push<CR>
nnoremap <leader>ga  :Git add %<CR>
nnoremap <leader>gaa :Git add .<CR>
nnoremap <leader>gad :Git add <C-R>=expand("%:p:h") . "/"<CR>
nnoremap <Leader>gb  :Gblame<CR>
nnoremap <Leader>gr  :Gremove<CR>

" Current line or selection to strings
map <silent> <Leader>st :call Stringify()<CR>

if !exists('g:dont_use_NERDTree')
  map <silent> <Leader>nd :NERDTreeToggle<CR>

  " Show current file in NERDTree
  map <silent> <Leader>nf :NERDTree<CR><C-w>p:NERDTreeFind<CR>
endif

" Space for open/close folds if exist
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" use <Space>gf to go to file in a vertical split
nnoremap <silent> <Leader>gf   :vertical botright wincmd F<CR>

" ,a - select all text in buffer
noremap  <Leader>a    ggVG

" Ctrl-J - show bookmarks
map <C-j> ma
imap <C-j> <Esc>ma

" Ctrl-P - Inserts the path of the currently edited file into a command
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Alt-Up - upcase, Alt-Down - downcase
map <A-Up>   gUiw
imap <A-Up>   <Esc>gUiw<Esc>i
map <A-Down> guiw
imap <A-Down> <Esc>guiw<Esc>i

nnoremap <silent> <C-]>  gt
nnoremap <silent> <C-[>  gT
vnoremap <silent> <C-]>  gt
vnoremap <silent> <C-[>  gT
nnoremap <silent> ] :bn<CR>
nnoremap <silent> [ :bp<CR>
vnoremap <silent> ] :bn<CR>
vnoremap <silent> [ :bp<CR>

