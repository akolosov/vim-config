nnoremap ; :

" No HELP
noremap <F1> <Esc>
inoremap <F1> <Esc>

" Get rid of most annoying typo: typing q: when I meant :q.
" You can still get to cmdline-window easily by typing <Ctrl-F> in command mode, so loosing q: is no loss.
map q: :q

if !exists('g:hardcore_mode')
	" Save file
	imap <F2>   <Esc>:w<CR>i
	vmap <F2>   :<C-U>w<CR>v
	nmap  <F2>   :w<CR>

	" Save all files
	imap <C-F2> <Esc>:wa<CR>i
	vmap <C-F2> :<C-U>wa<CR>v
	nmap  <C-F2> :wa<CR>

	" Save file as...
	imap <S-F2> <Esc>:w<SPACE><C-R>=expand("%:p")<CR>
	vmap <S-F2> :<C-U>w<SPACE><C-R>=expand("%:p")<CR>
	nmap  <S-F2> :w<SPACE><C-R>=expand("%:p")<CR>

	" Delete line
	map  <C-y>  dd
	imap <C-y>  <ESC>ddi

	" Delete line to EOL
	map  <C-l>  d$
	imap <C-l>  <ESC><Right>d$i<Right>

	" Delete line to BOL
	map  <C-h>  d^
	imap <C-h>  <ESC>d^i

	" Toggle readonly mode
	map <silent> <F4> <Esc>:call ToggleReadonly()<CR>

	" F5 - Open the selected region in a new narrowed window
	noremap <silent> <F5> :NR<CR>

	imap <F10> <ESC>:qa!<CR>
	map <F10> :qa!<CR>

	if (&readonly || argc() || !isdirectory(argv(0))) && !exists("s:std_in") && ((exists('g:nerdtree_tabs_open_on_console_startup') && g:nerdtree_tabs_open_on_console_startup != 1) && (exists('g:nerdtree_tabs_open_on_gui_startup') && g:nerdtree_tabs_open_on_gui_startup != 1)) || (!exists("g:use_nerd_tree"))
		noremap <silent> <Esc><Esc> :qa<CR>
		inoremap <silent> <Esc><Esc> <Esc>:qa<CR>
	else
		noremap <silent> <Esc><Esc><Esc> :call CloseWindowOrKillBuffer()<CR>
		inoremap <silent> <Esc><Esc><Esc> <Esc>:call CloseWindowOrKillBuffer()<CR>
	endif

	noremap <silent> <Leader>c :call CloseWindowOrKillBuffer()<CR>

	imap <S-F10> <ESC>:wqa!<CR>
	map <S-F10> :wqa!<CR>

	map <C-g>   :TagbarToggle<CR>
	imap <C-g>   <Esc>:TagbarToggle<CR>

	" Ctrl-/ - Comment current line.
	map <C-_> ,ci
	imap <C-_> <ESC>,cii

	if exists("g:use_copy_cut_paste_keys")
		" CTRL-X and SHIFT-Del are Cut
		vnoremap <C-X>   "+x
		vnoremap <S-Del> "+x

		" CTRL-C and CTRL-Insert are Copy
		vnoremap <C-C>      "+y
		vnoremap <C-Insert> "+y

		" CTRL-V and SHIFT-Insert are Paste
		map  <C-V>      "+gP
		map  <S-Insert> "+gP

		cmap <C-V>      <C-R>+
		cmap <S-Insert> <C-R>+

		exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
		exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

		imap <S-Insert> <C-V>
		vmap <S-Insert> <C-V>
	endif

	if exists('g:use_arrow_keys')
		" Text selection by SHIFT+Arrows
		imap <S-Up>    <Esc>v<Up>
		imap <S-Down>  <Esc>v<Down>
		imap <S-Left>  <Esc>v<Left>
		imap <S-Right> <Esc><Right>v<Right>
		nmap <S-Up>    v<Up>
		nmap <S-Down>  v<Down>
		nmap <S-Left>  v<Left>
		nmap <S-Right> v<Right>
		vmap <S-Up>    <Up>
		vmap <S-Down>  <Down>
		vmap <S-Left>  <Left>
		vmap <S-Right> <Right>
		imap <S-End>   <Esc>v<End>
		imap <S-Home>  <Esc>v<Home>
		nmap <S-End>   v<End>
		nmap <S-Home>  v<Home>
		vmap <S-End>   <End>
		vmap <S-Home>  <Home>
	endif

	map <C-z> :UndotreeToggle<CR>
	imap <C-z> <Esc>:UndotreeToggle<CR>

	map <C-t> :tabnew<CR>
	imap <C-t> <Esc>:tabnew<CR>

	if exists('g:use_VimShell')
		map ~~ :VimShell<CR>
	endif

	noremap <silent> ' :<C-U>call ToggleQuote()<CR>

	" Space for open/close folds if exist
	nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
	vnoremap <Space> zf

	" Make gf (go to file)
	" Create the file if not existent
	nnoremap <Leader>gf :e <cfile><CR>
	nnoremap <Leader>gfw :sp +e <cfile><CR>
	nnoremap <Leader>gft :tabe <cfile><CR>

	" Alt-Up - upcase, Alt-Down - downcase
	map <A-Up>   gUiw
	imap <A-Up>   <Esc>gUiw<Esc>i
	map <A-Down> guiw
	imap <A-Down> <Esc>guiw<Esc>i

	nnoremap <silent> <C-]>  gt
	nnoremap <silent> <C-[>  gT
	vnoremap <silent> <C-]>  gt
	vnoremap <silent> <C-[>  gT
	nnoremap <silent> ] :bn<CR>
	nnoremap <silent> [ :bp<CR>
	vnoremap <silent> ] :bn<CR>
	vnoremap <silent> [ :bp<CR>

	" Show most plugin keybindings
	nnoremap <silent><Leader>? :map <Leader><CR>

	if !exists('g:use_ctrl_space')
		nnoremap <silent> <C-p> :CtrlPMenu<CR>
		vnoremap <silent> <C-p> <C-U>:CtrlPMenu<CR>
		inoremap <silent> <C-p> <Esc>:CtrlPMenu<CR>
	endif

else
	if (&readonly || argc())
		noremap <silent> <Esc><Esc> :qa<CR>
		inoremap <silent> <Esc><Esc> <Esc>:qa<CR>
	end
	" Easy window navigation
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l
endif

if !exists('g:use_ctrl_space')
	nnoremap <silent> .. :CtrlPBuffer<cr>
	vnoremap <silent> .. <C-U>:CtrlPBuffer<cr>
	inoremap <silent> .. <Esc>:CtrlPBuffer<cr>

	nnoremap <silent> <Space><Space> :CtrlPtjump<CR>
	vnoremap <silent> <Space><Space> :CtrlPtjumpVisual<CR>

	nnoremap <silent> `` :CtrlPMenu<CR>
	vnoremap <silent> `` <C-U>:CtrlPMenu<CR>
	inoremap <silent> `` <Esc>:CtrlPMenu<CR>
endif

" Repeat the last recorded macro
map Q @@

" Easy up and down on wrapped long lines
nnoremap j gj
nnoremap k gk

if !exists('g:use_arrow_keys') && !exists('g:hardcore_mode_with_arrow_keys')
	nnoremap <up> <nop>
	nnoremap <down> <nop>
	nnoremap <left> <nop>
	nnoremap <right> <nop>
	inoremap <up> <nop>
	inoremap <down> <nop>
	inoremap <left> <nop>
	inoremap <right> <nop>
else
	nnoremap <Down> gj
	nnoremap <Up> gk
endif

" A more handy Esc
inoremap jj <Esc>
inoremap kk <Esc>
inoremap jk <Esc>
inoremap kj <Esc>

" Easier increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

" Jump to start and end of line using the home row keys
noremap H ^
noremap L $

" Switch off search highlights
nmap <silent> // :nohlsearch<CR><Esc>

" Comment/Uncomment current line or selection
map <silent> \\ ,c<Space>
imap <silent> \\ <Esc>,c<Space>i

" ,a - select all text in buffer
noremap  <Leader>a    ggVG

" Split window verticaly
nnoremap <silent> <Leader>vv <C-w>v

" Split window horizontaly
nnoremap <silent> <Leader>hh <C-w>s

" Ctrl-P - Inserts the path of the currently edited file into a command
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Insert semeoclon to EOL
" then press <Enter> to add new line below
inoremap ;; <Esc>m`A;<Esc>``a
inoremap ;;<CR> <Esc>A;<Esc>o
nnoremap ;; m"A;<Esc>`"
nnoremap ;;<CR> A;<Esc>o

" CtrlP filemanager
nnoremap <Leader>o :CtrlP<CR>

" Type <Leader>w to save file (a lot faster than :w<Enter>):
nnoremap <Leader>w :w<CR>

" Type <Leader>wa to save all files (a lot faster than :wa<Enter>):
nnoremap <Leader>wa :wa<CR>

" Type <Leader>w? to save file as ...
nnoremap <Leader>w? :w<SPACE><C-R>=expand("%:p")<CR>

" Type <Leader>wq to save file and close it (a lot faster than :wq<Enter>):
nnoremap <Leader>wq :wq<CR>

" Type <Leader>x to save file and close it (a lot faster than :x<Enter>):
nnoremap <Leader>x :wq<CR>

" Type <Leader>x! to save all files and close VIM (a lot faster than :waq!<Enter>):
nnoremap <Leader>x! :waq!<CR>

" Type <Leader>X to close current file without saving (a lot faster than :q!<Enter>):
nnoremap <Leader>X :q!<CR>

" Type <Leader>X! to close VIM without saving (a lot faster than :qa!<Enter>):
nnoremap <Leader>X! :qa!<CR>

" <Leader># Surround a word with #{ruby interpolation}
map <Leader># ysiw#
vmap <Leader># c#{<C-R>"}<ESC>

" <Leader>" Surround a word with "quotes"
map <Leader>" ysiw"
vmap <Leader>" c"<C-R>""<ESC>

" <Leader>' Surround a word with 'single quotes'
map <Leader>' ysiw'
vmap <Leader>' c'<C-R>"'<ESC>

" <Leader>) or <Leader>( Surround a word with (parens)
" The difference is in whether a space is put in
map <Leader>( ysiw(
map <Leader>) ysiw)
vmap <Leader>( c( <C-R>" )<ESC>
vmap <Leader>) c(<C-R>")<ESC>

" <Leader>[ Surround a word with [brackets]
map <Leader>] ysiw]
map <Leader>[ ysiw[
vmap <Leader>[ c[ <C-R>" ]<ESC>
vmap <Leader>] c[<C-R>"]<ESC>

" <Leader>{ Surround a word with {braces}
map <Leader>} ysiw}
map <Leader>{ ysiw{
vmap <Leader>} c{ <C-R>" }<ESC>
vmap <Leader>{ c{<C-R>"}<ESC>

" <Leader>` Surround a word with `apostrophes`
map <Leader>` ysiw`

" Selection inside:
" inside []
map <Leader>s]  vi[
vmap <Leader>s]  i[
" with []
map <Leader>s[  va[
vmap <Leader>s[  a[
" inside {}
map <Leader>s}  vi{
vmap <Leader>s}  i{
" with {}
map <Leader>s{  va{
vmap <Leader>s{  a{
" inside ()
map <Leader>s)  vi(
vmap <Leader>s)  i(
" with ()
map <Leader>s(  va(
vmap <Leader>s(  a(
" inside <>
map <Leader>s>  vi<
vmap <Leader>s>  i<
" with <>
map <Leader>s<  va<
vmap <Leader>s<  a<
" inside ""
map <Leader>s"  vi"
vmap <Leader>s"  i"
" inside ''
map <Leader>s'  vi'
vmap <Leader>s'  i'

" Go to last edit location with <Leader>.
nnoremap <Leader>. '.

" Switch between the last two files
nnoremap '' <c-^>

" Set working directory
nnoremap <silent> <leader>cd :lcd %:p:h<CR>

" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>ee :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" <Leader>qc to toggle quickfix window (where you have stuff like Ag)
" <Leader>qo to open it back up (rare)
nmap <silent> <Leader>qc :cclose<CR>
nmap <silent> <Leader>qo :copen<CR>

" Switch all buffers to tabs
map <silent> <leader>tb :tab :ball<cr>

" Switch all buffers to windows
map <silent> <Leader>sb :sball<CR>


" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

vmap <Tab> >
vmap <S-Tab> <
imap <S-Tab> <Esc><<i

" Switch between windows
nnoremap <silent> <Tab> :wincmd w<CR>
nnoremap <silent> <S-Tab> :wincmd W<CR>

" Allow using the repeat operator with a visual selection (!)
vnoremap . :normal .<CR>

" Yank word under cursor
nnoremap <Leader>yw byw

" Yank current line
nnoremap <Leader>yl ^y$

" Swap words
noremap <silent> <Leader>sw <Esc>bdwwP

" Replace words
noremap <silent> <Leader>rw "_diwhp

" Delete blank lines
nnoremap <Leader>db :%g/^$/d<CR>\h
vnoremap <Leader>db :g/^$/d<CR>:setlocal nohls<CR>

" Surround every line in the file with '
nnoremap <Leader>l' :%s/.*/'\0'<CR>:setlocal nohls<CR>
vnoremap <Leader>l' :s/.*/'\0'<CR>:setlocal nohls<CR>

" Surround every line in the file with "
nnoremap <Leader>l" :%s/.*/"\0"<CR>:setlocal nohls<CR>
vnoremap <Leader>l" :s/.*/"\0"<CR>:setlocal nohls<CR>

" Surround every line in the file with ()
nnoremap <Leader>l( :%s/.*/(\0)<CR>:setlocal nohls<CR>
vnoremap <Leader>l( :s/.*/(\0)<CR>:setlocal nohls<CR>

" Surround every line in the file with []
nnoremap <Leader>l[ :%s/.*/[\0]<CR>:setlocal nohls<CR>
vnoremap <Leader>l[ :s/.*/[\0]<CR>:setlocal nohls<CR>

" Surround every line in the file with {}
nnoremap <Leader>l{ :%s/.*/{\0}<CR>:setlocal nohls<CR>
vnoremap <Leader>l{ :s/.*/{\0}<CR>:setlocal nohls<CR>

" Strip trailing whitespace
noremap <silent> <leader>ss :call StripWhitespace()<CR>

" Search word under cursor or selected word entire files in current directory (recursively)
nnoremap <silent> <Leader>sf :Ag <cword><CR>
vnoremap <silent> <Leader>sf :<C-U>execute "Ag ".GetVisual()<CR>

" Search word under cursor and replace with user inputs in current file
nnoremap <Leader>sr :%s/<C-R>=expand("<cword>")<CR>//<Left>
vnoremap <Leader>sr :<C-U>%s/<C-R>=GetVisual()<CR>//<Left>

" Code folding options
nmap <silent> <leader>f0 :set foldlevel=0<CR>:set foldcolumn=0<CR>
nmap <silent> <leader>f1 :set foldlevel=1<CR>:set foldcolumn=1<CR>
nmap <silent> <leader>f2 :set foldlevel=2<CR>:set foldcolumn=2<CR>
nmap <silent> <leader>f3 :set foldlevel=3<CR>:set foldcolumn=3<CR>
nmap <silent> <leader>f4 :set foldlevel=4<CR>:set foldcolumn=4<CR>
nmap <silent> <leader>f5 :set foldlevel=5<CR>:set foldcolumn=5<CR>
nmap <silent> <leader>f6 :set foldlevel=6<CR>:set foldcolumn=6<CR>
nmap <silent> <leader>f7 :set foldlevel=7<CR>:set foldcolumn=7<CR>
nmap <silent> <leader>f8 :set foldlevel=8<CR>:set foldcolumn=8<CR>
nmap <silent> <leader>f9 :set foldlevel=9<CR>:set foldcolumn=9<CR>

" Git
nnoremap <leader>gs  :Gstatus<CR>
nnoremap <leader>gd  :Gvdiff<CR>
nnoremap <leader>gc  :!git commit -a -m '<C-R>="'"<CR><Left>
nnoremap <leader>gl  :!git pull<CR>
nnoremap <leader>gp  :Git push<CR>
nnoremap <leader>ga  :Git add %<CR>
nnoremap <leader>gu  :Git add .<CR>
nnoremap <leader>g?  :Git add <C-R>=expand("%:p:h") . "/"<CR>
nnoremap <Leader>gb  :Gblame<CR>
nnoremap <Leader>gr  :Gremove<CR>

" Current line or selection to strings
map <silent> <Leader>st :call Stringify()<CR>

if exists('g:use_nerd_tree')
	map <silent> <Leader>nd :NERDTreeToggle<CR>

	" Show current file in NERDTree
	map <silent> <Leader>nf :NERDTree<CR><C-w>p:NERDTreeFind<CR>
endif

" Insert new line before current line
nnoremap <Leader><Up> O<ESC>j

" Insert new line after current line
nnoremap <Leader><Down> o<ESC>k

" Toggle show Space/Tab/EOL
nmap <silent> <leader><CR> :set list!<CR>

" Insert new line with '=' after current line with the same length
nnoremap <leader>= yypVr=

" Insert new line with '=' after current line with the same length
nnoremap <leader>- yypVr-
